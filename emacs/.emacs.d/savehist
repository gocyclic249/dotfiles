;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(buffer-name-history query-replace-history query-replace-from-to-history erc-nick-history-list erc-server-history-list file-name-history minibuffer-history helm-M-x-input-history))
(setq buffer-name-history '("*helm buffers*" "*Messages*" "*helm M-x*" "*helm-mode-dired*" "*Compile-Log*" "*helm-mode-package-install*" "irc.parahumans.net:6667" "nil" "*helm-mode-list-directory*" ".saves-*" "init.el<.emacs.d>" "Downloads" "Writing" ".gnus" ".gnus<2>" "*Group*" "*Directory*" "*helm-mode-kill-buffer*" ".newsrc-dribble" "*Customize Group: Emacs*" "*Customize Group: Applications*" "*Customize Group: Mail*" "*Disabled Command*" "*helm-mode-basic-save-buffer*" "*helm-mode-completion-at-point*" "WAD.txt" "*shell*" ".authinfo" ".spacemacs" "*shell*" ".gnus.el" ".spacemacs<2>"))
(setq query-replace-history '("C-b" "C-f"))
(setq erc-nick-history-list '("eleventh"))
(setq erc-server-history-list '("irc.parahumans.net"))
(setq file-name-history '("~/.gnus" "~/Dropbox/Writing/WAD.txt" "~/dotfiles/emacs/.authinfo" "~/dotfiles/spacemacs/.spacemacs" "~/dotfiles/emacs/.emacs.d/.gnus.el" "~/.emacs.d/init.el" "~/newinst.sh" "~/Dropbox/Writing/IrishTaylor.org"))
(setq minibuffer-history '(#("M-a" 0 3 (fontified t)) "" "q" "Cust" "Gnus" "/home/eleventh/" "1" ".g" "gnus" #("












                         " 37 38 (display (image :type svg :data "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Gnu Emacs Logo

   Copyright (C) 2008-2017 Free Software Foundation, Inc.

   Author: Francesc Rocher <f.rocher@member.fsf.org>

   This file is part of GNU Emacs.

   GNU Emacs is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   GNU Emacs is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

-->
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   id=\"svg2182\"
   sodipodi:version=\"0.32\"
   inkscape:version=\"0.46\"
   width=\"260.05341\"
   height=\"264.41125\"
   version=\"1.0\"
   sodipodi:docname=\"gnus.svg\"
   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"
   sodipodi:docbase=\"/home/rocher/local/fret/devel/emacs/etc/images/gnus\"
   style=\"display:inline\">
  <metadata
     id=\"metadata2166\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <cc:license
           rdf:resource=\"http://www.gnu.org/copyleft/gpl.html\" />
        <dc:title>gnus</dc:title>
        <dc:date>2008/06/28</dc:date>
        <dc:creator>
          <cc:Agent>
            <dc:title>Francesc Rocher</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:rights>
          <cc:Agent>
            <dc:title>GPL</dc:title>
          </cc:Agent>
        </dc:rights>
        <dc:description>gnus splash image</dc:description>
        <cc:license
           rdf:resource=\"http://www.gnu.org/copyleft/gpl.html\" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <sodipodi:namedview
     inkscape:window-height=\"768\"
     inkscape:window-width=\"872\"
     inkscape:pageshadow=\"2\"
     inkscape:pageopacity=\"0.0\"
     guidetolerance=\"10.0\"
     gridtolerance=\"10.0\"
     objecttolerance=\"10.0\"
     borderopacity=\"1.0\"
     bordercolor=\"#666666\"
     pagecolor=\"#ffffff\"
     id=\"base\"
     inkscape:zoom=\"2.0914389\"
     inkscape:cx=\"130.0267\"
     inkscape:cy=\"132.20563\"
     inkscape:window-x=\"1620\"
     inkscape:window-y=\"48\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\" />
  <defs
     id=\"defs2184\" />
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(-212.83046,-131.30737)\">
    <path
       style=\"fill:#8080ff;fill-opacity:1\"
       d=\"M 260.5116,393.86288 C 262.4558,387.05826 267.2179,379.59417 297.5589,335.79513 C 319.8161,303.66546 330.6302,287.20557 331.3011,284.43711 C 333.0433,277.24717 333.8671,278.40273 332.422,286.00932 C 331.6536,290.05378 330.814,293.91798 330.5562,294.59643 C 329.9147,296.28421 263.0752,392.98791 261.2542,394.86288 C 259.97,396.18503 259.882,396.06646 260.5116,393.86288 z M 329.012,337.40194 C 329.012,329.74759 337.5126,308.05531 346.2698,293.36288 C 352.585,282.76738 356.0658,278.66265 357.6327,279.96306 C 360.1959,282.09035 360.2435,284.91669 357.7795,288.68079 C 348.0751,303.50587 344.2235,309.82445 343.039,312.86288 C 342.2885,314.78788 339.997,319.28788 337.9468,322.86288 C 335.8965,326.43788 333.6994,331.01438 333.0643,333.03289 C 331.7287,337.27788 329.012,340.20698 329.012,337.40194 z M 433.7142,310.70702 C 432.4323,301.35502 439.5948,263.14948 445.9643,245.36288 C 453.3999,224.59932 462.3035,187.01802 464.5939,166.7291 C 466.2806,151.78888 466.39427,150.80924 464.5937,145.48334 C 462.93203,140.5683 461.13308,138.66246 458.2794,135.86712 L 453.27086,132.20754 L 456.6769,131.86288 C 461.6112,131.86288 468.5389,137.86276 471.5396,144.73501 C 475.9375,154.80727 469.1008,193.79566 457.4889,224.86288 C 456.1527,228.43788 453.9429,236.08788 452.5782,241.86288 C 451.2135,247.63788 449.3929,254.61288 448.5324,257.36288 C 446.2294,264.72267 441.012,292.37437 441.012,297.21983 C 441.012,299.89703 439.8131,303.91285 437.6813,308.3766 L 434.3507,315.35061 L 433.7142,310.70702 z M 365.0631,287.61288 C 364.3799,285.87462 364.6166,285.04955 366.1039,283.98525 C 369.6205,281.46876 374.6693,273.55113 384.4649,255.19145 C 394.0909,237.14958 397.4834,232.60267 396.4281,239.15726 C 396.1442,240.92035 395.6983,243.71288 395.4372,245.36288 C 395.1761,247.01288 393.3158,250.83788 391.3032,253.86288 C 389.2906,256.88788 384.5367,265.43788 380.7391,272.86288 C 376.9414,280.28788 373.1295,287.15038 372.2681,288.11288 C 370.0173,290.62794 366.1425,290.35905 365.0631,287.61288 z M 320.6995,262.21705 C 320.3213,261.83892 320.0085,256.09205 320.0042,249.44621 C 319.9968,237.8214 319.8735,237.11784 316.7542,230.90534 C 314.6707,226.75574 312.0521,223.33733 309.4273,221.34075 L 305.3427,218.23371 L 307.5276,215.04493 L 309.7126,211.85615 L 312.2239,214.18355 C 318.5615,220.05696 320.0866,224.73813 320.89,240.78293 C 321.2726,248.42216 321.9363,253.34314 322.6144,253.56709 C 323.5922,253.89002 325.7193,249.88561 329.6283,240.36288 C 330.5606,238.09183 330.8754,237.84885 330.924,239.36288 C 331.0132,242.14152 328.403,251.64049 326.3917,255.85659 C 325.4718,257.78505 324.4153,260.0111 324.0441,260.80336 C 323.2442,262.51029 321.6616,263.17921 320.6995,262.21705 z M 245.1628,252.33639 C 242.7335,250.29224 242.012,248.8836 242.012,246.18509 L 242.012,242.68509 L 245.0499,245.24139 C 247.4506,247.26142 248.7618,247.66988 251.2999,247.18844 C 261.6191,245.23115 277.1998,234.54682 293.4888,218.25787 C 305.9223,205.82438 308.2914,205.51694 300.9064,217.2953 C 297.7695,222.29833 293.4637,226.68597 282.6564,235.89191 C 268.2506,248.16321 260.2183,253.05838 252.4128,254.32337 C 248.8949,254.8935 247.867,254.6118 245.1628,252.33639 z M 253.5564,224.18379 C 252.8479,221.3612 255.3686,216.65779 265.7868,201.36288 C 274.8859,188.00461 280.3419,181.70108 281.3091,183.42939 C 282.2829,185.16947 280.4642,188.16253 267.644,205.91868 C 262.7666,212.67391 257.7486,220.13306 256.493,222.49457 C 254.2534,226.70659 254.1976,226.73871 253.5564,224.18379 z M 384.1421,211.31896 C 380.7719,208.48314 379.5828,205.79041 380.4684,203.00013 C 381.0442,201.18604 381.1572,201.18566 384.7957,202.98583 C 389.6343,205.37981 394.2581,204.2146 402.3056,198.57322 C 408.5766,194.17721 413.0548,188.59621 417.4561,179.69171 C 419.3087,175.94368 420.7236,174.19872 421.6285,174.54597 C 423.516,175.27026 422.6184,178.34159 417.0017,190.37802 C 413.2533,198.41088 411.2578,201.35952 406.9201,205.27556 C 397.3226,213.94009 389.6701,215.97043 384.1421,211.31896 z M 349.133,205.78403 C 347.8246,205.26039 339.6679,197.95186 331.007,189.54285 C 314.4595,173.47664 311.9119,171.8466 303.3959,171.87654 C 296.4656,171.9009 295.032,172.81115 290.3019,180.19054 L 285.7873,187.23384 L 284.2923,183.79836 C 283.47,181.90885 282.4863,179.27759 282.1062,177.95112 C 281.7262,176.62464 280.6639,175.42908 279.7456,175.2943 C 278.8273,175.15952 276.1491,173.50192 273.794,171.61075 C 271.4389,169.71957 268.6984,167.88177 267.7041,167.52675 C 265.0385,166.57501 258.442,170.33611 255.7003,174.37086 C 252.3997,179.22817 236.1965,193.87325 232.3241,195.49923 C 229.2026,196.80994 224.2969,196.49006 220.8863,194.75342 C 219.99224,194.29815 217.81391,191.671 216.04559,188.91531 L 212.83046,183.90496 L 214.80788,178.98414 C 217.15719,174.46058 217.72614,175.73223 218.2264,179.21246 C 219.18564,185.88569 227.68275,189.64961 233.5992,186.55932 C 236.89108,184.8399 252.69001,170.52231 255.8597,166.33149 C 257.20184,164.55698 260.1603,162.00113 262.5471,160.73493 C 266.7567,158.50172 266.9938,158.48379 270.4593,160.13637 C 275.6317,162.60292 282.7604,169.52516 284.1848,173.46442 C 284.8607,175.33358 285.6949,176.86288 286.0385,176.86288 C 287.1145,176.86288 290.7063,172.50475 292.4119,169.12981 C 295.3372,163.34131 302.301,161.46605 311.3959,164.01764 C 314.6954,164.9433 318.6863,168.30161 331.512,180.94492 C 344.6932,193.93873 348.2487,196.90999 351.6941,197.81043 C 358.8294,199.67523 363.2588,198.02956 373.0854,189.86288 C 374.0781,189.03788 375.8498,185.88788 377.0226,182.86288 C 379.1772,177.30564 381.012,174.43132 381.012,176.61327 C 381.012,179.76831 373.6837,197.57365 371.7267,199.17339 C 363.2349,206.11521 361.752,206.86338 356.6119,206.7995 C 353.8069,206.76463 350.4414,206.30768 349.133,205.78403 z M 433.3755,165.01518 C 432.4887,162.66574 432.7313,161.09102 434.7622,156.01518 C 436.967,150.50427 437.5192,149.86288 440.0588,149.86288 C 443.1917,149.86288 445.26134,150.88627 443.04984,151.7349 C 442.27424,152.03251 440.6717,155.12671 440.0503,158.04922 C 439.1073,162.48386 436.241,167.86288 434.8209,167.86288 C 434.6171,167.86288 433.9667,166.58142 433.3755,165.01518 z \"
       id=\"path2180\"
       sodipodi:nodetypes=\"csssssccssssssccssscccsssssccccsssssssccsscccccsssssscccccsssssccssssccsssssssccsscccssssssscccssssssssssssssssccsssssc\" />
    <path
       style=\"fill:#2020e0;fill-opacity:1\"
       d=\"M 260.04229,388.62496 C 260.04229,388.26779 262.41982,381.75886 265.3257,374.16067 L 270.60912,360.34578 L 302.0757,315.68057 C 319.38233,291.1147 333.61856,271.09097 333.71178,271.18339 C 333.80501,271.27582 333.11629,275.17516 332.1813,279.84861 L 330.48132,288.34578 L 296.61135,337.34578 C 264.11074,384.3647 260.04229,390.06972 260.04229,388.62496 z M 335.05416,340.71822 C 335.08273,332.59962 342.90077,312.31861 351.0582,299.20165 C 361.32924,282.68606 362.26372,281.87063 364.84686,287.16962 C 366.25843,290.0653 369.41495,290.67354 372.08298,288.56398 C 375.51683,285.84889 380.03165,278.64484 389.67374,260.49539 C 395.24604,250.00657 400.36753,241.23737 401.05483,241.00827 C 402.01257,240.68902 402.13639,241.96455 401.58489,246.46875 C 401.0637,250.72541 399.8145,254.01845 397.05407,258.4125 C 394.95789,261.7492 390.67229,269.6242 387.5305,275.9125 C 384.38872,282.2008 380.31753,289.451 378.48342,292.02406 C 376.64931,294.59711 373.9974,298.97426 372.59029,301.75106 C 368.67817,309.47125 362.50895,311.98005 358.85614,307.33625 C 357.77044,305.95601 356.44994,305.09384 355.9217,305.42031 C 354.21874,306.4728 350.06567,313.70826 348.00838,319.20686 C 346.90756,322.14908 344.70815,326.53397 343.1208,328.95106 C 341.53346,331.36816 339.66859,335.26362 338.97666,337.60766 C 338.28473,339.95169 337.11643,342.36929 336.38044,342.9801 C 335.30763,343.87046 335.04464,343.42196 335.05416,340.71822 z M 426.51573,311.58247 C 424.295,305.9694 431.46333,266.71003 438.975,243.34578 C 449.77938,209.73992 452.64775,197.05569 454.04936,176.68519 C 454.96702,163.34843 454.96666,163.3447 452.25475,157.85768 C 449.80808,152.90735 449.07425,152.22791 444.7659,150.92392 C 437.56998,148.74594 435.05822,150.01328 433.02221,156.8493 C 431.37096,162.3935 429.09988,166.84578 427.92306,166.84578 C 427.57209,166.84578 426.72504,165.4941 426.04074,163.84204 C 424.90188,161.09259 425.14703,160.10787 428.93648,152.21044 C 436.06395,137.3564 443.83129,130.05358 450.98168,131.48366 C 456.22602,132.53253 462.61341,139.07407 464.61888,145.44997 C 466.30125,150.79865 466.29973,151.75864 464.58462,167.19573 C 463.13938,180.20371 461.75469,186.94649 457.46738,201.85317 C 454.53978,212.03223 451.15045,222.60723 449.93555,225.35317 C 446.1278,233.95946 435.54286,279.84531 433.44365,296.84578 C 432.61201,303.58079 427.5826,314.27908 426.51573,311.58247 z M 321.70896,253.17911 C 321.34229,252.81245 321.03695,247.97495 321.03042,242.42911 C 321.01146,226.31633 317.22788,216.41482 309.49941,212.25276 C 307.59799,211.22878 306.04229,210.18189 306.04229,209.92634 C 306.04229,208.49277 316.49525,193.84578 317.51833,193.84578 C 319.99152,193.84578 326.75558,199.72182 328.49015,203.37716 C 333.52767,213.99294 332.83118,233.93705 326.98086,246.59578 C 323.69212,253.71184 323.04713,254.51728 321.70896,253.17911 z M 244.54744,244.71616 C 240.09276,240.8049 240.10279,238.80779 244.62887,228.50779 C 251.12687,213.72028 279.13707,173.54057 281.38247,175.78597 C 282.70155,177.10505 279.80235,182.49237 274.46237,188.64499 C 269.3537,194.5311 259.18508,209.65448 255.66693,216.5987 C 252.14831,223.54384 252.80477,226.43547 258.23185,227.89683 C 260.41964,228.48594 263.56598,228.67004 265.22372,228.30593 C 271.51092,226.92503 284.00526,217.92955 300.05241,203.23049 C 301.68769,201.73258 303.03384,201.22253 303.91486,201.76703 C 306.03123,203.07502 296.56646,216.17624 288.01264,223.77902 C 271.80417,238.18538 260.40653,245.44918 251.29744,247.17791 C 248.61178,247.6876 247.44854,247.26336 244.54744,244.71616 z M 385.05208,203.08715 C 383.14399,202.1294 380.92795,200.16456 380.12756,198.72084 C 378.77163,196.27507 378.93462,195.50718 382.51548,187.47084 C 386.47833,178.57722 388.11251,177.21384 390.15681,181.09578 C 392.28002,185.12758 395.18904,185.76578 402.36307,183.77366 C 406.32748,182.67281 414.04229,176.5005 414.04229,174.42959 C 414.04229,172.88138 419.26037,164.84578 420.26573,164.84578 C 421.92875,164.84578 420.892,169.30215 417.54229,176.55216 C 415.61729,180.71857 414.04229,184.60238 414.04229,185.18286 C 414.04229,189.11353 400.4626,201.51494 394.28759,203.2235 C 393.0475,203.56662 391.24279,204.06811 390.27712,204.33793 C 389.31144,204.60775 386.96018,204.0449 385.05208,203.08715 z M 351.04229,197.71284 C 348.53009,196.99762 343.02663,192.26267 331.54229,180.93585 C 318.71242,168.28195 314.72677,164.92651 311.42627,164.00055 C 302.33137,161.44895 295.36758,163.32421 292.44224,169.11271 C 290.73664,172.48766 287.1448,176.84578 286.06886,176.84578 C 285.72522,176.84578 284.89106,175.31648 284.21516,173.44732 C 282.79071,169.50806 275.66202,162.58582 270.4896,160.11927 C 267.0241,158.46669 266.78705,158.48462 262.5774,160.71783 C 260.19059,161.98404 257.18126,164.50249 255.89001,166.31439 C 252.89963,170.51055 237.46336,184.53731 233.62954,186.54223 C 229.94244,188.47042 223.46343,187.71137 220.79008,185.03803 C 219.53025,183.77819 218.15867,179.73726 216.94597,173.71255 C 215.909,168.56083 214.85791,163.44578 214.61023,162.34578 C 214.36254,161.24578 214.77878,159.51283 215.5352,158.49477 C 216.86599,156.70366 217.03603,156.7143 220.78906,158.82362 C 222.92227,160.02255 225.74927,162.75363 227.07128,164.8927 C 229.98826,169.61248 233.49513,170.68159 238.2193,168.2913 C 243.83735,165.44874 252.09545,158.65646 255.73355,153.88584 C 261.53439,146.27922 267.01031,140.89191 269.60251,140.24131 C 270.95713,139.90132 274.42274,140.39104 277.30387,141.32958 C 281.31123,142.63498 283.68866,144.31886 287.42036,148.49485 L 292.29844,153.9537 L 294.13431,150.93486 C 296.60368,146.8743 304.74442,142.84578 310.48053,142.84578 C 318.1271,142.84578 324.55144,146.55377 334.0772,156.46527 C 338.7714,161.34955 343.75341,166.74716 345.14834,168.45995 C 354.26564,179.65481 368.97614,182.16041 374.81884,173.51365 C 376.07095,171.66063 378.24823,169.06481 379.65725,167.74515 L 382.2191,165.34578 L 381.49679,169.21635 C 380.17312,176.3093 374.99275,188.27876 372.22815,190.63193 C 364.00605,197.63042 357.90971,199.66799 351.04229,197.71284 z \"
       id=\"path2169\" />
  </g>
</svg>
") rear-nonsticky (display))) "143"
;;;  #("eval-buffer" 0 11 (read-only nil helm-realvalue "eval-buffer" helm-cand-num 1 helm-cur-source ((nomark) (name . "Emacs Commands History") (candidates . #[0 "\304\302\300\305\303$\211\205 \306\307\310\301\"\"\207" [commandp nil ("eval-buffer" "doc-view-goto-page" "doc-view-first-page" "gnus" "auto-complete-mode" "ispell-minor-mode" "shell" "customize" "erc" "bb-dice" "recover-session") t helm-comp-read-get-candidates nil delete "" helm-cr-default] 6 "
;;; 
;;; (fn)"]) (keymap keymap (keymap (13 . helm-confirm-and-exit-minibuffer)) keymap (21 . helm-M-x-universal-argument) keymap (27 keymap (13 . helm-cr-empty-string)) (C-return . helm-cr-empty-string) keymap (tab . helm-execute-persistent-action) (f13 lambda nil (interactive) (helm-select-nth-action 12)) (f12 lambda nil (interactive) (helm-select-nth-action 11)) (f11 lambda nil (interactive) (helm-select-nth-action 10)) (f10 lambda nil (interactive) (helm-select-nth-action 9)) (f9 lambda nil (interactive) (helm-select-nth-action 8)) (f8 lambda nil (interactive) (helm-select-nth-action 7)) (f7 lambda nil (interactive) (helm-select-nth-action 6)) (f6 lambda nil (interactive) (helm-select-nth-action 5)) (f5 lambda nil (interactive) (helm-select-nth-action 4)) (f4 lambda nil (interactive) (helm-select-nth-action 3)) (f3 lambda nil (interactive) (helm-select-nth-action 2)) (f2 lambda nil (interactive) (helm-select-nth-action 1)) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (23 . #[0 "\306\307\310\311\312\313\305!\314\"\315\316%DC\216\317\302!\210\320\304!\321\211\211\301=\203+ \317\302!\210\322\202a \323\303\"\211\262\203> \317A!\210\322\202a \313!\262\324\300\"\262\325!\203W \317!\210\202` \326\327\"\244\321\266\204\205i \202 )\207" [(keymap (tab . helm-execute-persistent-action) (f13 lambda nil (interactive) (helm-select-nth-action 12)) (f12 lambda nil (interactive) (helm-select-nth-action 11)) (f11 lambda nil (interactive) (helm-select-nth-action 10)) (f10 lambda nil (interactive) (helm-select-nth-action 9)) (f9 lambda nil (interactive) (helm-select-nth-action 8)) (f8 lambda nil (interactive) (helm-select-nth-action 7)) (f7 lambda nil (interactive) (helm-select-nth-action 6)) (f6 lambda nil (interactive) (helm-select-nth-action 5)) (f5 lambda nil (interactive) (helm-select-nth-action 4)) (f4 lambda nil (interactive) (helm-select-nth-action 3)) (f3 lambda nil (interactive) (helm-select-nth-action 2)) (f2 lambda nil (interactive) (helm-select-nth-action 1)) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) #4 (f1 lambda nil (interactive) (helm-select-nth-action 0)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . helm-execute-selection-action-at-nth-+9) (56 . helm-execute-selection-action-at-nth-+8) (55 . helm-execute-selection-action-at-nth-+7) (54 . helm-execute-selection-action-at-nth-+6) (53 . helm-execute-selection-action-at-nth-+5) (52 . helm-execute-selection-action-at-nth-+4) (51 . helm-execute-selection-action-at-nth-+3) (50 . helm-execute-selection-action-at-nth-+2) (49 . helm-execute-selection-action-at-nth-+1) (63 . helm-help) (110 . #[0 "\306\307\310\311\312\313\305!\314\"\315\316%DC\216\317\302!\210\320\304!\321\211\211\301=\203+ \317\302!\210\322\202a \323\303\"\211\262\203> \317A!\210\322\202a \313!\262\324\300\"\262\325!\203W \317!\210\202` \326\327\"\244\321\266\204\205i \202 )\207" [#7 110 helm-run-cycle-resume nil nil nil funcall make-byte-code 0 "\300\205 \300 \207" vconcat vector [] 1 "
;;; 
;;; (fn)" call-interactively read-key nil t assoc lookup-key commandp mapcar identity last-command-event unread-command-events] 7 "
;;; 
;;; (fn)" nil]) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-copy-to-buffer) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . helm-execute-selection-action-at-nth-+9) (56 . helm-execute-selection-action-at-nth-+8) (55 . helm-execute-selection-action-at-nth-+7) (54 . helm-execute-selection-action-at-nth-+6) (53 . helm-execute-selection-action-at-nth-+5) (52 . helm-execute-selection-action-at-nth-+4) (51 . helm-execute-selection-action-at-nth-+3) (50 . helm-execute-selection-action-at-nth-+2) (49 . helm-execute-selection-action-at-nth-+1) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-execute-persistent-action) (26 . helm-select-action) (9 . helm-execute-persistent-action) (13 . helm-maybe-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (85 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (111 . helm-previous-source) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (C-up . helm-follow-action-backward) (C-down . helm-follow-action-forward) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (18 . helm-minibuffer-history) (menu-bar keymap (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . abort-recursive-edit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-line-or-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-line-or-history-element) (next . next-history-element) (27 keymap (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) 23 helm-yank-text-at-point ((31 . helm-undo-yank-text-at-point)) nil nil funcall make-byte-code 0 "\300\205 \300 \207" vconcat vector [] 1 "
;;; 
;;; (fn)" call-interactively read-key nil t assoc lookup-key commandp mapcar identity last-command-event unread-command-events] 7 "
;;; 
;;; (fn)" nil]) (f1 lambda nil (interactive) (helm-select-nth-action 0)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . helm-execute-selection-action-at-nth-+9) (56 . helm-execute-selection-action-at-nth-+8) (55 . helm-execute-selection-action-at-nth-+7) (54 . helm-execute-selection-action-at-nth-+6) (53 . helm-execute-selection-action-at-nth-+5) (52 . helm-execute-selection-action-at-nth-+4) (51 . helm-execute-selection-action-at-nth-+3) (50 . helm-execute-selection-action-at-nth-+2) (49 . helm-execute-selection-action-at-nth-+1) (63 . helm-help) (110 . #[0 "\306\307\310\311\312\313\305!\314\"\315\316%DC\216\317\302!\210\320\304!\321\211\211\301=\203+ \317\302!\210\322\202a \323\303\"\211\262\203> \317A!\210\322\202a \313!\262\324\300\"\262\325!\203W \317!\210\202` \326\327\"\244\321\266\204\205i \202 )\207" [(keymap (tab . helm-execute-persistent-action) (f13 lambda nil (interactive) (helm-select-nth-action 12)) (f12 lambda nil (interactive) (helm-select-nth-action 11)) (f11 lambda nil (interactive) (helm-select-nth-action 10)) (f10 lambda nil (interactive) (helm-select-nth-action 9)) (f9 lambda nil (interactive) (helm-select-nth-action 8)) (f8 lambda nil (interactive) (helm-select-nth-action 7)) (f7 lambda nil (interactive) (helm-select-nth-action 6)) (f6 lambda nil (interactive) (helm-select-nth-action 5)) (f5 lambda nil (interactive) (helm-select-nth-action 4)) (f4 lambda nil (interactive) (helm-select-nth-action 3)) (f3 lambda nil (interactive) (helm-select-nth-action 2)) (f2 lambda nil (interactive) (helm-select-nth-action 1)) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (23 . #[0 "\306\307\310\311\312\313\305!\314\"\315\316%DC\216\317\302!\210\320\304!\321\211\211\301=\203+ \317\302!\210\322\202a \323\303\"\211\262\203> \317A!\210\322\202a \313!\262\324\300\"\262\325!\203W \317!\210\202` \326\327\"\244\321\266\204\205i \202 )\207" [#8 23 helm-yank-text-at-point ((31 . helm-undo-yank-text-at-point)) nil nil funcall make-byte-code 0 "\300\205 \300 \207" vconcat vector [] 1 "
;;; 
;;; (fn)" call-interactively read-key nil t assoc lookup-key commandp mapcar identity last-command-event unread-command-events] 7 "
;;; 
;;; (fn)" nil]) (f1 lambda nil (interactive) (helm-select-nth-action 0)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) #4 (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . helm-execute-selection-action-at-nth-+9) (56 . helm-execute-selection-action-at-nth-+8) (55 . helm-execute-selection-action-at-nth-+7) (54 . helm-execute-selection-action-at-nth-+6) (53 . helm-execute-selection-action-at-nth-+5) (52 . helm-execute-selection-action-at-nth-+4) (51 . helm-execute-selection-action-at-nth-+3) (50 . helm-execute-selection-action-at-nth-+2) (49 . helm-execute-selection-action-at-nth-+1) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-execute-persistent-action) (26 . helm-select-action) (9 . helm-execute-persistent-action) (13 . helm-maybe-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (85 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (111 . helm-previous-source) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (C-up . helm-follow-action-backward) (C-down . helm-follow-action-forward) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (18 . helm-minibuffer-history) (menu-bar keymap (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . abort-recursive-edit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-line-or-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-line-or-history-element) (next . next-history-element) (27 keymap (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) 110 helm-run-cycle-resume nil nil nil funcall make-byte-code 0 "\300\205 \300 \207" vconcat vector [] 1 "
;;; 
;;; (fn)" call-interactively read-key nil t assoc lookup-key commandp mapcar identity last-command-event unread-command-events] 7 "
;;; 
;;; (fn)" nil]) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-copy-to-buffer) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . helm-execute-selection-action-at-nth-+9) (56 . helm-execute-selection-action-at-nth-+8) (55 . helm-execute-selection-action-at-nth-+7) (54 . helm-execute-selection-action-at-nth-+6) (53 . helm-execute-selection-action-at-nth-+5) (52 . helm-execute-selection-action-at-nth-+4) (51 . helm-execute-selection-action-at-nth-+3) (50 . helm-execute-selection-action-at-nth-+2) (49 . helm-execute-selection-action-at-nth-+1) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-execute-persistent-action) (26 . helm-select-action) (9 . helm-execute-persistent-action) (13 . helm-maybe-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (85 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (111 . helm-previous-source) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (C-up . helm-follow-action-backward) (C-down . helm-follow-action-forward) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (18 . helm-minibuffer-history) (menu-bar keymap (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . abort-recursive-edit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-line-or-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-line-or-history-element) (next . next-history-element) (27 keymap (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (action ("Sole action (Identity)" lambda (candidate) (if nil (helm-marked-candidates) (identity candidate)))) (persistent-action . #[257 "\300\301\"\207" [helm-elisp--persistent-help helm-describe-function] 4 "
;;; 
;;; (fn CANDIDATE)"]) (persistent-help . "Describe this command") (help-message . helm-M-x-help-message) (filtered-candidate-transformer (lambda (candidates sources) (cl-loop for i in candidates when (stringp i) collect (replace-regexp-in-string "\\s\\" "" i))) helm-M-x-transformer-hist helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (redisplay . identity) (mode-line . "\\<helm-comp-read-map>C/\\[helm-cr-empty-string]:Empty \\<helm-map>\\[helm-help]:Help \\[helm-select-action]:Act \\[helm-maybe-exit-minibuffer]/f1/f2/f-n:NthAct \\[helm-toggle-suspend-update]:Tog.suspend") (header-line . "C-j: Describe this command (keeping session)") (multimatch) (match-part . #[257 "\300!@\207" [split-string] 3 "
;;; 
;;; (fn C)"]) (group . helm))))
 #("previous-buffer" 0 15 (fontified t)) "View" #("n" 0 1 (fontified t)) #("C-p" 0 3 (fontified t face font-lock-string-face)) "in" "w" "293" "t" "121" "pl" #("text-mode-hook" 0 14 (fontified t)) #("WAD" 0 3 (dired-filename t mouse-face highlight help-echo "mouse-2: visit this file in other window" fontified t)) "/home/eleventh/Dropbox/" #("visual-line-mode" 0 16 (fontified t)) "ini" "set" "%PDF-1" "e" "History" "Description" "Ideal, Flaw and Bond" "Personality Trait" "Background" "Class" "Race" "Name" "11eleventh11@tfwno.gf" #("993" 0 3 (fontified t)) "port" "587" "6667" "/home/eleventh/dotfiles/spacemacs/.spacemacs" "bac" "Backround" "red" "DDM" "all thie tings" "STR" "/home/eleventh/.emacs.d/" #("init" 0 4 (fontified t help-echo "mouse-2: visit this file in other window" mouse-face highlight dired-filename t)) "Emacs" "erc-" "smart-tab" "tab" "auto"))
(setq helm-M-x-input-history '("View" "gn" "gnus" "e" "cus" "eva" "package" "pack" "pac" "%PDF-1" #("













                         " 38 39 (display (image :type svg :data "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Gnu Emacs Logo

   Copyright (C) 2008-2017 Free Software Foundation, Inc.

   Author: Francesc Rocher <f.rocher@member.fsf.org>

   This file is part of GNU Emacs.

   GNU Emacs is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   GNU Emacs is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

-->
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   id=\"svg2182\"
   sodipodi:version=\"0.32\"
   inkscape:version=\"0.46\"
   width=\"260.05341\"
   height=\"264.41125\"
   version=\"1.0\"
   sodipodi:docname=\"gnus.svg\"
   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"
   sodipodi:docbase=\"/home/rocher/local/fret/devel/emacs/etc/images/gnus\"
   style=\"display:inline\">
  <metadata
     id=\"metadata2166\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <cc:license
           rdf:resource=\"http://www.gnu.org/copyleft/gpl.html\" />
        <dc:title>gnus</dc:title>
        <dc:date>2008/06/28</dc:date>
        <dc:creator>
          <cc:Agent>
            <dc:title>Francesc Rocher</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:rights>
          <cc:Agent>
            <dc:title>GPL</dc:title>
          </cc:Agent>
        </dc:rights>
        <dc:description>gnus splash image</dc:description>
        <cc:license
           rdf:resource=\"http://www.gnu.org/copyleft/gpl.html\" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <sodipodi:namedview
     inkscape:window-height=\"768\"
     inkscape:window-width=\"872\"
     inkscape:pageshadow=\"2\"
     inkscape:pageopacity=\"0.0\"
     guidetolerance=\"10.0\"
     gridtolerance=\"10.0\"
     objecttolerance=\"10.0\"
     borderopacity=\"1.0\"
     bordercolor=\"#666666\"
     pagecolor=\"#ffffff\"
     id=\"base\"
     inkscape:zoom=\"2.0914389\"
     inkscape:cx=\"130.0267\"
     inkscape:cy=\"132.20563\"
     inkscape:window-x=\"1620\"
     inkscape:window-y=\"48\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\" />
  <defs
     id=\"defs2184\" />
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(-212.83046,-131.30737)\">
    <path
       style=\"fill:#8080ff;fill-opacity:1\"
       d=\"M 260.5116,393.86288 C 262.4558,387.05826 267.2179,379.59417 297.5589,335.79513 C 319.8161,303.66546 330.6302,287.20557 331.3011,284.43711 C 333.0433,277.24717 333.8671,278.40273 332.422,286.00932 C 331.6536,290.05378 330.814,293.91798 330.5562,294.59643 C 329.9147,296.28421 263.0752,392.98791 261.2542,394.86288 C 259.97,396.18503 259.882,396.06646 260.5116,393.86288 z M 329.012,337.40194 C 329.012,329.74759 337.5126,308.05531 346.2698,293.36288 C 352.585,282.76738 356.0658,278.66265 357.6327,279.96306 C 360.1959,282.09035 360.2435,284.91669 357.7795,288.68079 C 348.0751,303.50587 344.2235,309.82445 343.039,312.86288 C 342.2885,314.78788 339.997,319.28788 337.9468,322.86288 C 335.8965,326.43788 333.6994,331.01438 333.0643,333.03289 C 331.7287,337.27788 329.012,340.20698 329.012,337.40194 z M 433.7142,310.70702 C 432.4323,301.35502 439.5948,263.14948 445.9643,245.36288 C 453.3999,224.59932 462.3035,187.01802 464.5939,166.7291 C 466.2806,151.78888 466.39427,150.80924 464.5937,145.48334 C 462.93203,140.5683 461.13308,138.66246 458.2794,135.86712 L 453.27086,132.20754 L 456.6769,131.86288 C 461.6112,131.86288 468.5389,137.86276 471.5396,144.73501 C 475.9375,154.80727 469.1008,193.79566 457.4889,224.86288 C 456.1527,228.43788 453.9429,236.08788 452.5782,241.86288 C 451.2135,247.63788 449.3929,254.61288 448.5324,257.36288 C 446.2294,264.72267 441.012,292.37437 441.012,297.21983 C 441.012,299.89703 439.8131,303.91285 437.6813,308.3766 L 434.3507,315.35061 L 433.7142,310.70702 z M 365.0631,287.61288 C 364.3799,285.87462 364.6166,285.04955 366.1039,283.98525 C 369.6205,281.46876 374.6693,273.55113 384.4649,255.19145 C 394.0909,237.14958 397.4834,232.60267 396.4281,239.15726 C 396.1442,240.92035 395.6983,243.71288 395.4372,245.36288 C 395.1761,247.01288 393.3158,250.83788 391.3032,253.86288 C 389.2906,256.88788 384.5367,265.43788 380.7391,272.86288 C 376.9414,280.28788 373.1295,287.15038 372.2681,288.11288 C 370.0173,290.62794 366.1425,290.35905 365.0631,287.61288 z M 320.6995,262.21705 C 320.3213,261.83892 320.0085,256.09205 320.0042,249.44621 C 319.9968,237.8214 319.8735,237.11784 316.7542,230.90534 C 314.6707,226.75574 312.0521,223.33733 309.4273,221.34075 L 305.3427,218.23371 L 307.5276,215.04493 L 309.7126,211.85615 L 312.2239,214.18355 C 318.5615,220.05696 320.0866,224.73813 320.89,240.78293 C 321.2726,248.42216 321.9363,253.34314 322.6144,253.56709 C 323.5922,253.89002 325.7193,249.88561 329.6283,240.36288 C 330.5606,238.09183 330.8754,237.84885 330.924,239.36288 C 331.0132,242.14152 328.403,251.64049 326.3917,255.85659 C 325.4718,257.78505 324.4153,260.0111 324.0441,260.80336 C 323.2442,262.51029 321.6616,263.17921 320.6995,262.21705 z M 245.1628,252.33639 C 242.7335,250.29224 242.012,248.8836 242.012,246.18509 L 242.012,242.68509 L 245.0499,245.24139 C 247.4506,247.26142 248.7618,247.66988 251.2999,247.18844 C 261.6191,245.23115 277.1998,234.54682 293.4888,218.25787 C 305.9223,205.82438 308.2914,205.51694 300.9064,217.2953 C 297.7695,222.29833 293.4637,226.68597 282.6564,235.89191 C 268.2506,248.16321 260.2183,253.05838 252.4128,254.32337 C 248.8949,254.8935 247.867,254.6118 245.1628,252.33639 z M 253.5564,224.18379 C 252.8479,221.3612 255.3686,216.65779 265.7868,201.36288 C 274.8859,188.00461 280.3419,181.70108 281.3091,183.42939 C 282.2829,185.16947 280.4642,188.16253 267.644,205.91868 C 262.7666,212.67391 257.7486,220.13306 256.493,222.49457 C 254.2534,226.70659 254.1976,226.73871 253.5564,224.18379 z M 384.1421,211.31896 C 380.7719,208.48314 379.5828,205.79041 380.4684,203.00013 C 381.0442,201.18604 381.1572,201.18566 384.7957,202.98583 C 389.6343,205.37981 394.2581,204.2146 402.3056,198.57322 C 408.5766,194.17721 413.0548,188.59621 417.4561,179.69171 C 419.3087,175.94368 420.7236,174.19872 421.6285,174.54597 C 423.516,175.27026 422.6184,178.34159 417.0017,190.37802 C 413.2533,198.41088 411.2578,201.35952 406.9201,205.27556 C 397.3226,213.94009 389.6701,215.97043 384.1421,211.31896 z M 349.133,205.78403 C 347.8246,205.26039 339.6679,197.95186 331.007,189.54285 C 314.4595,173.47664 311.9119,171.8466 303.3959,171.87654 C 296.4656,171.9009 295.032,172.81115 290.3019,180.19054 L 285.7873,187.23384 L 284.2923,183.79836 C 283.47,181.90885 282.4863,179.27759 282.1062,177.95112 C 281.7262,176.62464 280.6639,175.42908 279.7456,175.2943 C 278.8273,175.15952 276.1491,173.50192 273.794,171.61075 C 271.4389,169.71957 268.6984,167.88177 267.7041,167.52675 C 265.0385,166.57501 258.442,170.33611 255.7003,174.37086 C 252.3997,179.22817 236.1965,193.87325 232.3241,195.49923 C 229.2026,196.80994 224.2969,196.49006 220.8863,194.75342 C 219.99224,194.29815 217.81391,191.671 216.04559,188.91531 L 212.83046,183.90496 L 214.80788,178.98414 C 217.15719,174.46058 217.72614,175.73223 218.2264,179.21246 C 219.18564,185.88569 227.68275,189.64961 233.5992,186.55932 C 236.89108,184.8399 252.69001,170.52231 255.8597,166.33149 C 257.20184,164.55698 260.1603,162.00113 262.5471,160.73493 C 266.7567,158.50172 266.9938,158.48379 270.4593,160.13637 C 275.6317,162.60292 282.7604,169.52516 284.1848,173.46442 C 284.8607,175.33358 285.6949,176.86288 286.0385,176.86288 C 287.1145,176.86288 290.7063,172.50475 292.4119,169.12981 C 295.3372,163.34131 302.301,161.46605 311.3959,164.01764 C 314.6954,164.9433 318.6863,168.30161 331.512,180.94492 C 344.6932,193.93873 348.2487,196.90999 351.6941,197.81043 C 358.8294,199.67523 363.2588,198.02956 373.0854,189.86288 C 374.0781,189.03788 375.8498,185.88788 377.0226,182.86288 C 379.1772,177.30564 381.012,174.43132 381.012,176.61327 C 381.012,179.76831 373.6837,197.57365 371.7267,199.17339 C 363.2349,206.11521 361.752,206.86338 356.6119,206.7995 C 353.8069,206.76463 350.4414,206.30768 349.133,205.78403 z M 433.3755,165.01518 C 432.4887,162.66574 432.7313,161.09102 434.7622,156.01518 C 436.967,150.50427 437.5192,149.86288 440.0588,149.86288 C 443.1917,149.86288 445.26134,150.88627 443.04984,151.7349 C 442.27424,152.03251 440.6717,155.12671 440.0503,158.04922 C 439.1073,162.48386 436.241,167.86288 434.8209,167.86288 C 434.6171,167.86288 433.9667,166.58142 433.3755,165.01518 z \"
       id=\"path2180\"
       sodipodi:nodetypes=\"csssssccssssssccssscccsssssccccsssssssccsscccccsssssscccccsssssccssssccsssssssccsscccssssssscccssssssssssssssssccsssssc\" />
    <path
       style=\"fill:#2020e0;fill-opacity:1\"
       d=\"M 260.04229,388.62496 C 260.04229,388.26779 262.41982,381.75886 265.3257,374.16067 L 270.60912,360.34578 L 302.0757,315.68057 C 319.38233,291.1147 333.61856,271.09097 333.71178,271.18339 C 333.80501,271.27582 333.11629,275.17516 332.1813,279.84861 L 330.48132,288.34578 L 296.61135,337.34578 C 264.11074,384.3647 260.04229,390.06972 260.04229,388.62496 z M 335.05416,340.71822 C 335.08273,332.59962 342.90077,312.31861 351.0582,299.20165 C 361.32924,282.68606 362.26372,281.87063 364.84686,287.16962 C 366.25843,290.0653 369.41495,290.67354 372.08298,288.56398 C 375.51683,285.84889 380.03165,278.64484 389.67374,260.49539 C 395.24604,250.00657 400.36753,241.23737 401.05483,241.00827 C 402.01257,240.68902 402.13639,241.96455 401.58489,246.46875 C 401.0637,250.72541 399.8145,254.01845 397.05407,258.4125 C 394.95789,261.7492 390.67229,269.6242 387.5305,275.9125 C 384.38872,282.2008 380.31753,289.451 378.48342,292.02406 C 376.64931,294.59711 373.9974,298.97426 372.59029,301.75106 C 368.67817,309.47125 362.50895,311.98005 358.85614,307.33625 C 357.77044,305.95601 356.44994,305.09384 355.9217,305.42031 C 354.21874,306.4728 350.06567,313.70826 348.00838,319.20686 C 346.90756,322.14908 344.70815,326.53397 343.1208,328.95106 C 341.53346,331.36816 339.66859,335.26362 338.97666,337.60766 C 338.28473,339.95169 337.11643,342.36929 336.38044,342.9801 C 335.30763,343.87046 335.04464,343.42196 335.05416,340.71822 z M 426.51573,311.58247 C 424.295,305.9694 431.46333,266.71003 438.975,243.34578 C 449.77938,209.73992 452.64775,197.05569 454.04936,176.68519 C 454.96702,163.34843 454.96666,163.3447 452.25475,157.85768 C 449.80808,152.90735 449.07425,152.22791 444.7659,150.92392 C 437.56998,148.74594 435.05822,150.01328 433.02221,156.8493 C 431.37096,162.3935 429.09988,166.84578 427.92306,166.84578 C 427.57209,166.84578 426.72504,165.4941 426.04074,163.84204 C 424.90188,161.09259 425.14703,160.10787 428.93648,152.21044 C 436.06395,137.3564 443.83129,130.05358 450.98168,131.48366 C 456.22602,132.53253 462.61341,139.07407 464.61888,145.44997 C 466.30125,150.79865 466.29973,151.75864 464.58462,167.19573 C 463.13938,180.20371 461.75469,186.94649 457.46738,201.85317 C 454.53978,212.03223 451.15045,222.60723 449.93555,225.35317 C 446.1278,233.95946 435.54286,279.84531 433.44365,296.84578 C 432.61201,303.58079 427.5826,314.27908 426.51573,311.58247 z M 321.70896,253.17911 C 321.34229,252.81245 321.03695,247.97495 321.03042,242.42911 C 321.01146,226.31633 317.22788,216.41482 309.49941,212.25276 C 307.59799,211.22878 306.04229,210.18189 306.04229,209.92634 C 306.04229,208.49277 316.49525,193.84578 317.51833,193.84578 C 319.99152,193.84578 326.75558,199.72182 328.49015,203.37716 C 333.52767,213.99294 332.83118,233.93705 326.98086,246.59578 C 323.69212,253.71184 323.04713,254.51728 321.70896,253.17911 z M 244.54744,244.71616 C 240.09276,240.8049 240.10279,238.80779 244.62887,228.50779 C 251.12687,213.72028 279.13707,173.54057 281.38247,175.78597 C 282.70155,177.10505 279.80235,182.49237 274.46237,188.64499 C 269.3537,194.5311 259.18508,209.65448 255.66693,216.5987 C 252.14831,223.54384 252.80477,226.43547 258.23185,227.89683 C 260.41964,228.48594 263.56598,228.67004 265.22372,228.30593 C 271.51092,226.92503 284.00526,217.92955 300.05241,203.23049 C 301.68769,201.73258 303.03384,201.22253 303.91486,201.76703 C 306.03123,203.07502 296.56646,216.17624 288.01264,223.77902 C 271.80417,238.18538 260.40653,245.44918 251.29744,247.17791 C 248.61178,247.6876 247.44854,247.26336 244.54744,244.71616 z M 385.05208,203.08715 C 383.14399,202.1294 380.92795,200.16456 380.12756,198.72084 C 378.77163,196.27507 378.93462,195.50718 382.51548,187.47084 C 386.47833,178.57722 388.11251,177.21384 390.15681,181.09578 C 392.28002,185.12758 395.18904,185.76578 402.36307,183.77366 C 406.32748,182.67281 414.04229,176.5005 414.04229,174.42959 C 414.04229,172.88138 419.26037,164.84578 420.26573,164.84578 C 421.92875,164.84578 420.892,169.30215 417.54229,176.55216 C 415.61729,180.71857 414.04229,184.60238 414.04229,185.18286 C 414.04229,189.11353 400.4626,201.51494 394.28759,203.2235 C 393.0475,203.56662 391.24279,204.06811 390.27712,204.33793 C 389.31144,204.60775 386.96018,204.0449 385.05208,203.08715 z M 351.04229,197.71284 C 348.53009,196.99762 343.02663,192.26267 331.54229,180.93585 C 318.71242,168.28195 314.72677,164.92651 311.42627,164.00055 C 302.33137,161.44895 295.36758,163.32421 292.44224,169.11271 C 290.73664,172.48766 287.1448,176.84578 286.06886,176.84578 C 285.72522,176.84578 284.89106,175.31648 284.21516,173.44732 C 282.79071,169.50806 275.66202,162.58582 270.4896,160.11927 C 267.0241,158.46669 266.78705,158.48462 262.5774,160.71783 C 260.19059,161.98404 257.18126,164.50249 255.89001,166.31439 C 252.89963,170.51055 237.46336,184.53731 233.62954,186.54223 C 229.94244,188.47042 223.46343,187.71137 220.79008,185.03803 C 219.53025,183.77819 218.15867,179.73726 216.94597,173.71255 C 215.909,168.56083 214.85791,163.44578 214.61023,162.34578 C 214.36254,161.24578 214.77878,159.51283 215.5352,158.49477 C 216.86599,156.70366 217.03603,156.7143 220.78906,158.82362 C 222.92227,160.02255 225.74927,162.75363 227.07128,164.8927 C 229.98826,169.61248 233.49513,170.68159 238.2193,168.2913 C 243.83735,165.44874 252.09545,158.65646 255.73355,153.88584 C 261.53439,146.27922 267.01031,140.89191 269.60251,140.24131 C 270.95713,139.90132 274.42274,140.39104 277.30387,141.32958 C 281.31123,142.63498 283.68866,144.31886 287.42036,148.49485 L 292.29844,153.9537 L 294.13431,150.93486 C 296.60368,146.8743 304.74442,142.84578 310.48053,142.84578 C 318.1271,142.84578 324.55144,146.55377 334.0772,156.46527 C 338.7714,161.34955 343.75341,166.74716 345.14834,168.45995 C 354.26564,179.65481 368.97614,182.16041 374.81884,173.51365 C 376.07095,171.66063 378.24823,169.06481 379.65725,167.74515 L 382.2191,165.34578 L 381.49679,169.21635 C 380.17312,176.3093 374.99275,188.27876 372.22815,190.63193 C 364.00605,197.63042 357.90971,199.66799 351.04229,197.71284 z \"
       id=\"path2169\" />
  </g>
</svg>
") rear-nonsticky (display))) #("previous-buffer" 0 15 (fontified t)) #("<C-tab>" 0 7 (fontified t face font-lock-string-face)) #("n" 0 1 (fontified t)) #("C-p" 0 3 (fontified t face font-lock-string-face)) "ev" "doc-view" "doc" #("text-mode-hook" 0 14 (fontified t)) #("visual-line-mode" 0 16 (fontified t)) #("smart-tab-mode" 0 14 (fontified t)) "eval" "auto" "count-" "spell" "sh" "g" "cust" "port" "li" "s" "she" "erc" #("bindings" 0 8 (fontified t face font-lock-comment-face)) #("an" 0 2 (fontified t face font-lock-doc-face)) #("t" 0 1 (fontified t)) #("bb-secret" 0 9 (fontified t)) "bb" "eval-b" "recover" #("color-theme-matrix" 0 18 (fontified t)) "eval-buff" #("skeletor" 0 8 (tabulated-list-entry [("skeletor" face package-name font-lock-face package-name follow-link t package-desc [cl-struct-package-desc skeletor (20170616 1746) "Provides project skeletons for Emacs" ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) tar "melpa" nil ((:commit . "01c330ec115fc29bba5d9bdf6c15beb4a44e2281")) nil] action package-menu-describe-package) #("20170616.1746" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Provides project skeletons for Emacs" 0 36 (font-lock-face package-description))] tabulated-list-id [cl-struct-package-desc skeletor (20170616 1746) "Provides project skeletons for Emacs" ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) tar "melpa" nil ((:commit . "01c330ec115fc29bba5d9bdf6c15beb4a44e2281")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc skeletor (20170616 1746) "Provides project skeletons for Emacs" ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) tar "melpa" nil ((:commit . "01c330ec115fc29bba5d9bdf6c15beb4a44e2281")) nil] follow-link t font-lock-face package-name face package-name category default-button button (t))) "list-p" "packa" "shell" "package-in" "eval-bu" "auto-c" "eval-buffer" "list-pa" "package-install " "a" #("sentence" 0 3 (face font-lock-comment-face fontified t) 3 8 (face font-lock-comment-face fontified t))))
(setq kill-ring '(#("(gnus-demon-add-handler 'gnus-demon-scan-mail 5 nil)" 0 52 (fontified t)) #("Player's Handbook.pdf" 0 21 (dired-filename t mouse-face highlight help-echo "mouse-2: visit this file in other window" fontified t)) "(require 'gnus-desktop-notify)
(gnus-desktop-notify-mode)
(gnus-demon-add-scanmail)" #(";;dnd mail
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 10 (face font-lock-comment-face fontified t) 10 11 (fontified t)) #("dd
" 0 2 (fontified t) 2 3 (fontified t)) #(";;autocheck
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 11 (face font-lock-comment-face fontified t) 11 12 (fontified t)) "(gnus-demon-add-handler 'gnus-demon-scan-mail 5 t)
" #("(require 'gnus-autocheck)

;; automatic check every 2 minutes for new incoming mails by night
(setq gnus-autocheck-interval (* 60 2))

" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 24 (face font-lock-constant-face fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 30 (face font-lock-comment-delimiter-face fontified t) 30 85 (face font-lock-comment-face fontified t) 85 86 (face font-lock-comment-face fontified t) 86 87 (face font-lock-comment-face fontified t) 87 93 (face font-lock-comment-face fontified t) 93 94 (fontified t) 94 95 (fontified t) 95 99 (face font-lock-keyword-face fontified t) 99 133 (fontified t) 133 134 (fontified t) 134 135 (fontified t)) #("(require 'gnus-autocheck)

;; automatic check every 2 minutes for new incoming mails by night
(setq gnus-autocheck-interval (* 60 2))
" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 24 (fontified t face font-lock-constant-face) 24 26 (fontified t) 26 27 (fontified t) 27 30 (fontified t face font-lock-comment-delimiter-face) 30 85 (fontified t face font-lock-comment-face) 85 86 (fontified t face font-lock-comment-face) 86 87 (fontified t face font-lock-comment-face) 87 94 (fontified t face font-lock-comment-face) 94 95 (fontified t) 95 99 (fontified t face font-lock-keyword-face) 99 134 (fontified t)) #(";; autocheck should run all saturday and sunday
(setq gnus-autocheck-active-days '(\"Sat\" \"Sun\"))

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 47 (fontified t face font-lock-comment-face) 47 48 (fontified t) 48 49 (fontified t) 49 53 (face font-lock-keyword-face fontified t) 53 83 (fontified t) 83 88 (face font-lock-string-face fontified t) 88 89 (fontified t) 89 94 (face font-lock-string-face fontified t) 94 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t)) #(";; autocheck should run all saturday and sunday
(setq gnus-autocheck-active-days '(\"Sat\" \"Sun\"))

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 47 (fontified t face font-lock-comment-face) 47 48 (fontified t) 48 49 (fontified t) 49 53 (face font-lock-keyword-face fontified t) 53 83 (fontified t) 83 88 (face font-lock-string-face fontified t) 88 89 (fontified t) 89 94 (face font-lock-string-face fontified t) 94 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t)) #(";; autocheck should not run between 8:30AM and 6PM during work days
(setq gnus-autocheck-active-periods '((\"00:00\" \"08:30\") (\"18:00\" \"23:59\")))
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 67 (face font-lock-comment-face fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 73 (fontified t face font-lock-keyword-face) 73 107 (fontified t) 107 114 (fontified t face font-lock-string-face) 114 115 (fontified t) 115 122 (fontified t face font-lock-string-face) 122 125 (fontified t) 125 132 (fontified t face font-lock-string-face) 132 133 (fontified t) 133 140 (fontified t face font-lock-string-face) 140 143 (fontified t) 143 144 (fontified t)) "(require 'gnus-autocheck)

;; automatic check every 2 minutes for new incoming mails by night
(setq gnus-autocheck-interval (* 60 2))

;; autocheck should run all saturday and sunday
(setq gnus-autocheck-active-days '(\"Sat\" \"Sun\"))

;; autocheck should run all saturday and sunday
(setq gnus-autocheck-active-days '(\"Sat\" \"Sun\"))

;; autocheck should not run between 8:30AM and 6PM during work days
(setq gnus-autocheck-active-periods '((\"00:00\" \"08:30\") (\"18:00\" \"23:59\")))

" "[fieldset=Name]
Bjorn Jötunn-bane 
[/fieldset]
[fieldset=Race]
Dragon Born (Silver)
[/fieldset]
[fieldset=Class]
Barbarian
[/fieldset]
[fieldset=Background]
	Bjorn was born to the Bear-Claw tribe deep in the snow capped northern mountains. Years prior a silver dragon had traveled and intermarried with the tribe leaving more than one legacy. Like most born to the dragon's line  Bjorn could not wield the sacred bear totem of the tribes warriors  but instead called in the icy berserk rage of his ancestor.
	Years of raids against both giant and man hardened the young Bjorn. After a particularly successful raid, in the battle dew covered snow he earned the name Jötunn-bane for defeating the Jarl of the giants in single battle. While Bjorn will not turn down a fight he prefers to fight against those that are at least a bit of a challenge.           
[/fieldset]
[fieldset=Personality Trait]
Relentless - Once a goal is chosen Bjorn will not even let death stand in the way.
Protective - Growing up stronger and tougher even than other warriors Bjorn has taken that strength and uses it to defend his family and friends. 
[/fieldset]
[fieldset=Ideal, Flaw and Bond]
Ideal - Let me die without fear as I have lived without it.
Flaw - Survivors Guilt
Bond - The warband he is sworn to.
[/fieldset]
[fieldset=Description]
	Living up to his title of Berserk, Bjorn disdains to wear armor or indeed even a shirt even in the coldest weather. This shows off his silver scales and his chest and arm tattoos. A roaring bear tattooed over his heart and rune-script showing his kills and honoring the gods covering both his arms along with his chest are all done in blue ink. Bjorn stands 6'5\" inches high and wights nearly 300 lbs none of it fat. For decoration Bjorn wears torques and armbands in gold and silver.  
	His favored weapon is a gigantic two handed war-hammer. This weapon was taken off the Jarl of the Jötun when he earned his name. 
[/fieldset]
[fieldset=History]
[i]So you want to know how I came to travel with this warband. Get two ale and two mead. Don't worry it won't be for drinks long, the mead is for me[/i]

[b]Bjorn sits and looks contemplative as he sips his drink [/b]

[i]	In the dead of winter when the sister of the moon was low even at midday I was returning home. I had gone viking, a member of Jarl Redbeard's warband. We returned with so many of Freyja's tears you would have thought Baldur's Bane had found its mark again. As we crested the last rise before hearth and home, the snow turned red as if the battle dew from a thousand battles had been stored up and suddenly dumped upon us. Young Durin, called so as he was the oldest of us all, also called Mothers Ear for he could hear the slightest sound, stopped in the path. [say]Sounds of fire and steel from the town.[/say] he half whispered.
	Fire and ice had taken the town. From Jarl to thrall all laid dead, ettin-kin lay dead around. From breaker of rings to girl of houses each had fought. For all in sword sleep we made a pyre and mighty oaths we swore. Nine nights we tracked the frost giants. As the suns sister slept on the 9th day we attacked.
	Redbeard struck first a spear cast. Across Ymir's skull it flew, true as the arrow of fraud. A battle not for glory but dedicated to the Betrayer of Warriors. We fell on them like a bear on salmon. The eagles were well fed.
	First to fall was Thorson pricked full of arrows as a pin cushion. I don't remember much after that, taken by the berserk rage. When I awoke I was nearly dead. All the Jötun dead as my fellows. A might pyre I made for my kin. The Jötun I hung or carved to blood eagles as the mood struck.[/i]

[b]Bjorn adjusts his seat and drinks one horn of mead in a single drink.[/b]

[i]Now just imagine coming upon that scene. Dead giants hanging around like so many yule decorations and my ugly dragon face in the middle of it. I am really surprised they did not kill me on sight. Not hard to do [/i] Bjorn shrugged [i]I figure one of those little rabbits could have taken me down. Now how took down the ice dragon is a story for another time [/i]

[/fieldset]
" "[fieldset=Name]
Bjorn Jötunn-bane 
[/fieldset]
[fieldset=Race]
Dragon Born (Silver)
[/fieldset]
[fieldset=Class]
Barbarian
[/fieldset]
[fieldset=Background]
	Bjorn was born to the Bear-Claw tribe deep in the snow capped northern mountains. Years prior a silver dragon had traveled and intermarried with the tribe leaving more than one legacy. Like most born to the dragon's line  Bjorn could not weild the sacred bear toten of the tribes warriors  but instead called in the icy berzerk rage of his ancestor.
	Years of raids against both giant and man hardened the young Bjorn. After a particularly successful raid, in the battle dew covered snow he earned the name Jötunn-bane for defeating the Jarl of the giants in single battle. While Bjorn will not turn down a fight he prefers to fight against those that are at least a bit of a challenge.           
[/fieldset]
[fieldset=Personality Trait]
Relentless - Once a goal is chosen Bjorn will not even let death stand in the way.
Protective - Growing up stronger and tougher even than other warriors Bjorn has taken that strength and uses it to defend his family and friends. 
[/fieldset]
[fieldset=Ideal, Flaw and Bond]
Ideal - Let me die without fear as I have lived without it.
Flaw - Survivors Guilt
Bond - The warband he is sworn to.
[/fieldset]
[fieldset=Description]
	Living up to his title of Berserk, Bjorn disdains to wear armor or indeed even a shirt even in the coldest weather. This showes off his silver scales and his chest and arm tatoos. A roaring bear tatooed over his heart and runescript showing his kills and honoring the gods covering both his arms along with his chest are all done in blue ink. Bjorn stands 6'5\" inches high and wights nearly 300 lbs none of it fat. For decoration Bjorn wears torques and armbands in gold and silver.  
	His favored weapon is a gigantic two handed warhammer. This weapon was taken off the Jarl of the Jötun when he earned his name. 
[/fieldset]
[fieldset=History]
[say]So you want to know how I came to travel with this warband. Get two ale and two mead. Don't worry it won't be for drinks long, the mead is for me[/say]

[i]	In the dead of winter when the sister of the moon was low even at midday I was returning home. I had gone viking, a memeber of Jarl Redbeard's warband. We returned with so many of Freyja's tears you would have thought Baldur's Bane had found its mark again. As we crested the last rise before hearth and home, the snow turned red as if the battle dew from a thousand battles had been stored up and suddenly dumped upon us. Young Durin, called so as he was the oldest of us all, also called Mothers Ear for he could hear the slightest sound, stopped in the path. [say]Sounds of fire and steel from the town.[/say] he half whispered.
	Fire and ice had taken the town. From Jarl to thrall all laid dead, ettin-kin lay dead around. From breaker of rings to girl of houses each had fought. For all in sword sleep we made a pyre and mighty oaths we swore. Nine nights we tracked the frost giants. As the suns sister slept on the 9th day we attacked.
	Redbeard struck first a spear cast. Across Ymir's skull it flew, true as the arrow of fraud. A battle not for glory but dedicated to the Betrayer of Warriors. We fell on them like a bear on salmon. The eagles were well fed.
	First to fall was Thorson pricked full of arrows as a pin cushon. I don't remember much after that, taken by the berserk rage. When I awoke I was nearly dead. All the Jötun dead as my fellows. A might pyre I made for my kin. The Jötun I hung or carved to blood eagles as the mood struck.[/i]
Bjorn adjusts himself and drinks one horn of mead in a single drink.
[i]Now just imagine comeing upon that scene. Dead giants hanging around like so many yule decorations and my ugly dragon face in the middle of it. I am really supprised they did not kill me on sight. Not hard to do [/i] Bjorn shrugged [i]I figure one of those little rabbits could have taken me down. [/i]

[/fieldset]
" "[i][/i]" " Jötun" #("(global-set-key (kbd \"<C-tab>\") 'next-buffer)" 0 1 (fontified t) 1 21 (fontified t) 21 30 (fontified t face font-lock-string-face) 30 31 (fontified t) 31 33 (fontified t) 33 45 (fontified t)) #("(global-set-key \"\\C-c\\C-b\\C-f\" 'bb-field)" 0 12 (fontified t) 12 16 (fontified t) 16 17 (fontified t face font-lock-string-face) 17 22 (fontified t face font-lock-string-face) 22 25 (fontified t face font-lock-string-face) 25 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 32 (fontified t) 32 40 (fontified t) 40 41 (fontified t)) #("     (define-skeleton bb-img
      \"Insert [img] ... [/img] tags.\"
      nil \"[img]\" _ \"[/img]\")
" 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t) 6 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 25 (fontified t face font-lock-function-name-face) 25 28 (fontified t face font-lock-function-name-face) 28 29 (fontified t) 29 35 (fontified t) 35 36 (fontified t face font-lock-doc-face) 36 61 (fontified t face font-lock-doc-face) 61 65 (fontified t face font-lock-doc-face) 65 66 (fontified t face font-lock-doc-face) 66 67 (fontified t) 67 77 (fontified t) 77 78 (fontified t face font-lock-string-face) 78 83 (fontified t face font-lock-string-face) 83 84 (fontified t face font-lock-string-face) 84 87 (fontified t) 87 88 (fontified t face font-lock-string-face) 88 94 (fontified t face font-lock-string-face) 94 95 (fontified t face font-lock-string-face) 95 97 (fontified t)) " 
	His favored weapon is a gigantic two handed warhammer. This weapon was taken off the Jarl of the Jötun when he earned his name. 
[/fieldset]
[fieldset=History]
" "[fieldset=Name]
Bjorn Jötunn-bane 
[/fieldset]
[fieldset=Race]
Dragon Born (White)
[/fieldset]
[fieldset=Class]
Barbarian
[/fieldset]
[fieldset=Background]
Bjorn was born to the Bear-Claw tribe deep in the snow capped northern mountains. Years prior a white dragon had traveled and intermarried with the tribe leaving more than one legacy. Like most born to the dragon's line  Bjorn could not weild the sacred bear toten of the tribes warriors  but instead called in the icy berzerk rage of his ancestor.
Years of raids against both giant and man hardened the young Bjorn. After a particularly successful raid, in the battle dew covered snow he earned the name Jötunn-bane.  
[/fieldset]
[fieldset=Personality Trait]

[/fieldset]
[fieldset=Ideal, Flaw and Bond]

[/fieldset]
[fieldset=Description]
Living up to his title of Berserk, Bjorn disdains to wear armor or indeed even a shirt even in the coldest weather. This showes off is white scaly skin and his chest and arm tatoos. A roaring bear tatooed over his heart and runescript showing his kills and honoring the gods covering both his arms along with his chest are all done in blue ink. Bjorn stands 6'5\" inches high and wights nearly 300 lbs none of it fat.
His favored weapon is a gigantic two handed warhammer. This weapon was taken off the chieftain of the Jötun when he earned his name. 
[/fieldset]
[fieldset=History]

[/fieldset]
" "Jötun" #("auto-fill-mode)" 0 15 (fontified t)) "     (add-hook 'text-mode-hook 'auto-fill-mode)" "Jötunn-bane" "Jötunn" "[fieldset=Backgrrou" "ieldset]" "Name:
Race:
Class:

Background:
Personality Trait:
Ideal:
Bond:
Flaw:

Description:

History:

Given the information about your group's exploits tell me about a time that your character stood out.(RP sample)


" "machine imap.gmail.com login <USER> password <APP-PASSWORD> port imaps
machine smtp.gmail.com login <USER> password <APP-PASSWORD> port 587" "(setq user-mail-address \"<EMAIL_ADDRESS>\"
      user-full-name \"<FULL NAME>\")

(setq gnus-select-method
      '(nnimap \"gmail\"
	       (nnimap-address \"imap.gmail.com\")  ; it could also be imap.googlemail.com if that's your server.
	       (nnimap-server-port \"imaps\")
	       (nnimap-stream ssl)))

(setq smtpmail-smtp-server \"smtp.gmail.com\"
      smtpmail-smtp-service 587
      gnus-ignored-newsgroups \"^to\\\\.\\\\|^[0-9. ]+\\\\( \\\\|$\\\\)\\\\|^[\\\"]\\\"[#'()]\")
" #("    (define-skeleton bb-secret
      \"Secret\"
      \"Name: \"
      nil \"[secret=\"str\"]\" _ \"[/secret]\")
" 0 4 (fontified t) 4 5 (fontified t) 5 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 30 (fontified t face font-lock-function-name-face) 30 31 (fontified t) 31 37 (fontified t) 37 38 (fontified t face font-lock-doc-face) 38 44 (fontified t face font-lock-doc-face) 44 45 (fontified t face font-lock-doc-face) 45 46 (fontified t) 46 52 (fontified t) 52 53 (fontified t face font-lock-string-face) 53 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 61 (fontified t) 61 71 (fontified t) 71 72 (fontified t face font-lock-string-face) 72 80 (fontified t face font-lock-string-face) 80 81 (fontified t face font-lock-string-face) 81 84 (fontified t) 84 85 (fontified t face font-lock-string-face) 85 86 (fontified t face font-lock-string-face) 86 87 (fontified t face font-lock-string-face) 87 88 (fontified t) 88 90 (fontified t) 90 91 (fontified t face font-lock-string-face) 91 99 (fontified t face font-lock-string-face) 99 100 (fontified t face font-lock-string-face) 100 101 (fontified t face font-lock-string-face) 101 102 (fontified t) 102 103 (fontified t)) #("(global-set-key \"\\C-c\\C-b\\C-c\" 'bb-color)" 0 16 (fontified t) 16 17 (fontified t face font-lock-string-face) 17 22 (fontified t face font-lock-string-face) 22 25 (fontified t face font-lock-string-face) 25 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 32 (fontified t) 32 40 (fontified t) 40 41 (fontified t)) #("(global-set-key \"\\C-c\\C-b\\C-x\" 'bb-secret)" 0 16 (fontified t) 16 17 (fontified t face font-lock-string-face) 17 22 (fontified t face font-lock-string-face) 22 25 (fontified t face font-lock-string-face) 25 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 32 (fontified t) 32 36 (fontified t) 36 41 (fontified t) 41 42 (fontified t)) #("    (define-skeleton bb-underline
      \"Make underlined text.\"
      nil \"[u]\" _ \"[/u]\")
" 0 5 (fontified t) 5 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 33 (fontified t face font-lock-function-name-face) 33 40 (fontified t) 40 45 (fontified t face font-lock-doc-face) 45 63 (fontified t face font-lock-doc-face) 63 64 (fontified t) 64 74 (fontified t) 74 79 (fontified t face font-lock-string-face) 79 82 (fontified t) 82 88 (fontified t face font-lock-string-face) 88 90 (fontified t)) #(";;end sentence one space
(setq sentence-end-double-space nil)
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 25 (fontified t face font-lock-comment-face) 25 26 (fontified t) 26 30 (fontified t face font-lock-keyword-face) 30 62 (fontified t)) #("
" 0 1 (fontified t)) #("
;;org
(global-set-key \"\\C-cl\" 'org-store-link)
(global-set-key \"\\C-ca\" 'org-agenda)
(global-set-key \"\\C-cc\" 'org-capture)
(global-set-key \"\\C-cb\" 'org-iswitchb)
(global-set-key (kbd \"<f7>\") 'org-mark-ring-push)
(global-set-key (kbd \"C-<f7>\") 'org-mark-ring-goto)" 0 1 (fontified t face font-lock-comment-face) 1 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-face) 6 7 (fontified t face font-lock-comment-face) 7 23 (fontified t) 23 30 (fontified t face font-lock-string-face) 30 64 (fontified t) 64 71 (fontified t face font-lock-string-face) 71 101 (fontified t) 101 108 (fontified t face font-lock-string-face) 108 139 (fontified t) 139 146 (fontified t face font-lock-string-face) 146 183 (fontified t) 183 189 (fontified t face font-lock-string-face) 189 233 (fontified t) 233 241 (fontified t face font-lock-string-face) 241 263 (fontified t)) #("(global-set-key \"\\C-cl\" 'org-store-link)
(global-set-key \"\\C-ca\" 'org-agenda)
(global-set-key \"\\C-cc\" 'org-capture)
(global-set-key \"\\C-cb\" 'org-iswitchb)
(global-set-key (kbd \"<f7>\") 'org-mark-ring-push)
(global-set-key (kbd \"C-<f7>\") 'org-mark-ring-goto)" 0 16 (fontified t) 16 23 (fontified t face font-lock-string-face) 23 57 (fontified t) 57 64 (fontified t face font-lock-string-face) 64 94 (fontified t) 94 101 (fontified t face font-lock-string-face) 101 132 (fontified t) 132 139 (fontified t face font-lock-string-face) 139 176 (fontified t) 176 182 (fontified t face font-lock-string-face) 182 226 (fontified t) 226 234 (fontified t face font-lock-string-face) 234 256 (fontified t)) #("    (global-set-key \"\\C-c\\C-b\\C-s\" 'bb-spoiler)" 0 4 (fontified t) 4 20 (fontified t) 20 21 (fontified t face font-lock-string-face) 21 26 (fontified t face font-lock-string-face) 26 29 (fontified t face font-lock-string-face) 29 33 (fontified t face font-lock-string-face) 33 34 (fontified t face font-lock-string-face) 34 36 (fontified t) 36 47 (fontified t)) #("    (define-skeleton bb-spoiler
      \"Spoiler\"
      \"Title: \"
      nil \"[spoilerbutton=\"str\"]\" _ \"[/spoilerbutton]\")
" 0 4 (fontified t) 4 5 (fontified t) 5 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 31 (fontified t face font-lock-function-name-face) 31 32 (fontified t) 32 38 (fontified t) 38 47 (fontified t face font-lock-doc-face) 47 48 (fontified t) 48 54 (fontified t) 54 63 (fontified t face font-lock-string-face) 63 64 (fontified t) 64 74 (fontified t) 74 91 (fontified t face font-lock-string-face) 91 94 (fontified t) 94 97 (fontified t face font-lock-string-face) 97 100 (fontified t) 100 116 (fontified t face font-lock-string-face) 116 118 (fontified t face font-lock-string-face) 118 119 (fontified t) 119 120 (fontified t)) #("    (global-set-key \"\\C-c\\C-b\\C-d\" 'bb-dice)" 0 20 (fontified t) 20 21 (fontified t face font-lock-string-face) 21 26 (fontified t face font-lock-string-face) 26 29 (fontified t face font-lock-string-face) 29 33 (fontified t face font-lock-string-face) 33 34 (fontified t face font-lock-string-face) 34 36 (fontified t) 36 44 (fontified t)) #("    (define-skeleton bb-spoiler
      \"Spoiler\"
      \"Title: \"
      nil \"[spoilerbutton=\"str\"]\" _ \"[/spoilerbutton]\")
 

    (global-set-key \"\\C-c\\C-b\\C-i\" 'bb-italic)
    (global-set-key \"\\C-c\\C-b\\C-u\" 'bb-underline)
    (global-set-key \"\\C-c\\C-b\\C-b\" 'bb-bold)
    (global-set-key \"\\C-c\\C-b\\C-l\" 'bb-list)
    (global-set-key \"\\C-c\\C-b\\C-m\" 'bb-img)
    (global-set-key \"\\C-c\\C-b\\C-n\" 'bb-indent)
" 0 4 (fontified t) 4 5 (fontified t) 5 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 31 (fontified t face font-lock-function-name-face) 31 32 (fontified t) 32 38 (fontified t) 38 47 (fontified t face font-lock-doc-face) 47 48 (fontified t) 48 54 (fontified t) 54 63 (fontified t face font-lock-string-face) 63 64 (fontified t) 64 74 (fontified t) 74 91 (fontified t face font-lock-string-face) 91 94 (fontified t) 94 97 (fontified t face font-lock-string-face) 97 100 (fontified t) 100 116 (fontified t face font-lock-string-face) 116 118 (fontified t face font-lock-string-face) 118 119 (fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 127 (fontified t) 127 143 (fontified t) 143 144 (fontified t face font-lock-string-face) 144 156 (fontified t face font-lock-string-face) 156 157 (fontified t face font-lock-string-face) 157 170 (fontified t) 170 190 (fontified t) 190 191 (fontified t face font-lock-string-face) 191 196 (fontified t face font-lock-string-face) 196 199 (fontified t face font-lock-string-face) 199 203 (fontified t face font-lock-string-face) 203 204 (fontified t face font-lock-string-face) 204 220 (fontified t) 220 226 (fontified t) 226 240 (fontified t) 240 241 (fontified t face font-lock-string-face) 241 246 (fontified t face font-lock-string-face) 246 249 (fontified t face font-lock-string-face) 249 253 (fontified t face font-lock-string-face) 253 254 (fontified t face font-lock-string-face) 254 259 (fontified t) 259 265 (fontified t) 265 266 (fontified t) 266 277 (fontified t) 277 285 (fontified t) 285 286 (fontified t face font-lock-string-face) 286 291 (fontified t face font-lock-string-face) 291 294 (fontified t face font-lock-string-face) 294 298 (fontified t face font-lock-string-face) 298 299 (fontified t face font-lock-string-face) 299 310 (fontified t) 310 311 (fontified t) 311 330 (fontified t) 330 331 (fontified t face font-lock-string-face) 331 336 (fontified t face font-lock-string-face) 336 343 (fontified t face font-lock-string-face) 343 344 (fontified t face font-lock-string-face) 344 354 (fontified t) 354 358 (fontified t) 358 374 (fontified t) 374 375 (fontified t face font-lock-string-face) 375 380 (fontified t face font-lock-string-face) 380 383 (fontified t face font-lock-string-face) 383 387 (fontified t face font-lock-string-face) 387 388 (fontified t face font-lock-string-face) 388 396 (fontified t) 396 397 (fontified t) 397 400 (fontified t) 400 401 (fontified t)) #(" (define-skeleton bb-dice
      \"Dice roller and title\"
      \"Title: \"
      nil \"[dice=\"str\"]\" _ \"[/dice]\")
 " 0 1 (fontified t) 1 2 (fontified t) 2 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 25 (fontified t face font-lock-function-name-face) 25 26 (fontified t) 26 32 (fontified t) 32 55 (fontified t face font-lock-doc-face) 55 56 (fontified t) 56 62 (fontified t) 62 71 (fontified t face font-lock-string-face) 71 72 (fontified t) 72 82 (fontified t) 82 90 (fontified t face font-lock-string-face) 90 93 (fontified t) 93 96 (fontified t face font-lock-string-face) 96 99 (fontified t) 99 106 (fontified t face font-lock-string-face) 106 108 (fontified t face font-lock-string-face) 108 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t)) #("   (global-set-key \"\\C-c\\C-b\\C-i\" 'bb-indent)" 0 19 (fontified t) 19 20 (fontified t face font-lock-string-face) 20 25 (fontified t face font-lock-string-face) 25 28 (fontified t face font-lock-string-face) 28 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 41 (fontified t) 41 42 (fontified t) 42 45 (fontified t)) "" #("[dice=STR][/dice]" 0 6 (fontified t) 6 9 (fontified t) 9 10 (fontified t) 10 17 (fontified t)) #("   (global-set-key \"\\C-c\\C-f\\C-y\" 'bb-youtube)
(global-set-key \"\\C-c\\C-fy\"    'bb-youtube)" 0 19 (fontified t) 19 33 (fontified t face font-lock-string-face) 33 41 (fontified t) 41 46 (fontified t) 46 47 (fontified t) 47 63 (fontified t) 63 74 (face font-lock-string-face fontified t) 74 90 (fontified t)) #("   (global-set-key \"\\C-cj\"        'bb-point)
    (global-set-key \"\\C-c\\C-j\"     'bb-point)
" 0 19 (fontified t) 19 26 (face font-lock-string-face fontified t) 26 44 (fontified t) 44 45 (fontified t) 45 65 (fontified t) 65 75 (fontified t face font-lock-string-face) 75 90 (fontified t) 90 91 (fontified t)) #("   (global-set-key \"\\C-c\\C-f\\C-t\" 'bb-tt)
    (global-set-key \"\\C-c\\C-fu\"    'bb-url)
" 0 19 (fontified t) 19 32 (face font-lock-string-face fontified t) 32 33 (face font-lock-string-face fontified t) 33 41 (fontified t) 41 42 (fontified t) 42 60 (fontified t) 60 62 (fontified t) 62 73 (fontified t face font-lock-string-face) 73 85 (fontified t) 85 86 (fontified t)) #("   (define-skeleton bb-youtube
      \"Insert [youtube] ... [/youtube] tags.\"
      nil \"[youtube]\" _ \"[/youtube]\")
" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 30 (face font-lock-function-name-face fontified t) 30 31 (fontified t) 31 37 (fontified t) 37 44 (fontified t face font-lock-string-face) 44 76 (fontified t face font-lock-string-face) 76 77 (fontified t) 77 87 (fontified t) 87 90 (fontified t face font-lock-string-face) 90 98 (fontified t face font-lock-string-face) 98 101 (fontified t) 101 113 (fontified t face font-lock-string-face) 113 114 (fontified t) 114 115 (fontified t)) #("   (define-skeleton bb-point
      \"Make a new list point.\"
      nil (unless (bolp) \"\\n\") \"[*] \")
" 0 4 (fontified t) 4 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 28 (face font-lock-function-name-face fontified t) 28 29 (fontified t) 29 35 (fontified t) 35 59 (fontified t face font-lock-string-face) 59 60 (fontified t) 60 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 85 (fontified t) 85 89 (fontified t face font-lock-string-face) 89 91 (fontified t) 91 97 (fontified t face font-lock-string-face) 97 98 (fontified t) 98 99 (fontified t)) #("   (define-skeleton bb-tt
      \"Typewriter font.\"
      nil \"[font=\\\"Courier New\\\"]\" _ \"[/font]\")
    (define-skeleton bb-url
      \"Prompt for URL and insert link.\"
      \"URL: \" \"[url=\\\"\" str \"\\\"]\" _ \"[/url]\")
" 0 4 (fontified t) 4 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 25 (face font-lock-function-name-face fontified t) 25 26 (fontified t) 26 32 (fontified t) 32 50 (fontified t face font-lock-string-face) 50 51 (fontified t) 51 61 (fontified t) 61 85 (fontified t face font-lock-string-face) 85 88 (fontified t) 88 97 (fontified t face font-lock-string-face) 97 98 (fontified t) 98 99 (fontified t) 99 104 (fontified t) 104 119 (fontified t face font-lock-keyword-face) 119 120 (fontified t) 120 126 (fontified t face font-lock-function-name-face) 126 127 (fontified t) 127 133 (fontified t) 133 166 (fontified t face font-lock-string-face) 166 167 (fontified t) 167 173 (fontified t) 173 180 (fontified t face font-lock-string-face) 180 181 (fontified t) 181 190 (fontified t face font-lock-string-face) 190 195 (fontified t) 195 200 (fontified t face font-lock-string-face) 200 203 (fontified t) 203 211 (fontified t face font-lock-string-face) 211 212 (fontified t) 212 213 (fontified t)) #("As for key bindings, the following roughly matches AUCTeX’s scheme:
" 0 67 (fontified t) 67 68 (fontified t)) "    (setq skeleton-end-newline nil)
    (define-skeleton bb-italic
      \"Make italic text.\"
      nil \"[i]\" _ \"[/i]\")
    (define-skeleton bb-bold
      \"Make bold text.\"
      nil \"[b]\" _ \"[/b]\")
    (define-skeleton bb-underline
      \"Make underlined text.\"
      nil \"[u]\" _ \"[/u]\")
    (define-skeleton bb-tt
      \"Typewriter font.\"
      nil \"[font=\\\"Courier New\\\"]\" _ \"[/font]\")
    (define-skeleton bb-url
      \"Prompt for URL and insert link.\"
      \"URL: \" \"[url=\\\"\" str \"\\\"]\" _ \"[/url]\")
    (define-skeleton bb-list
      \"Start an unordered list.\"
      nil \"[list][*] \" _ \"\\n[/list]\")
    (define-skeleton bb-point
      \"Make a new list point.\"
      nil (unless (bolp) \"\\n\") \"[*] \")
    (define-skeleton bb-img
      \"Insert [img] ... [/img] tags.\"
      nil \"[img]\" _ \"[/img]\")
    (define-skeleton bb-indent
      \"Insert [indent] ... [/indent] tags.\"
      nil \"[indent]\" _ \"[/indent]\")
    (define-skeleton bb-youtube
      \"Insert [youtube] ... [/youtube] tags.\"
      nil \"[youtube]\" _ \"[/youtube]\")

As for key bindings, the following roughly matches AUCTeX’s scheme:

    (global-set-key \"\\C-c\\C-f\\C-e\" 'bb-italic)
    (global-set-key \"\\C-c\\C-f\\C-u\" 'bb-underline)
    (global-set-key \"\\C-c\\C-f\\C-b\" 'bb-bold)
    (global-set-key \"\\C-c\\C-f\\C-t\" 'bb-tt)
    (global-set-key \"\\C-c\\C-fu\"    'bb-url)
    (global-set-key \"\\C-c\\C-f\\C-l\" 'bb-list)
    (global-set-key \"\\C-cj\"        'bb-point)
    (global-set-key \"\\C-c\\C-j\"     'bb-point)
    (global-set-key \"\\C-c\\C-fi\"    'bb-img)
    (global-set-key \"\\C-c\\C-f\\C-i\" 'bb-indent)
    (global-set-key \"\\C-c\\C-f\\C-y\" 'bb-youtube)
    (global-set-key \"\\C-c\\C-fy\"    'bb-youtube)" #("
SHA256:kJwSdiMh5cmsrWL76LXtCtShzGZQ3u4okHyH54KhlzA eleventh@ThinkPad
The key's randomart image is:
+---[RSA 4096]----+
|  o.*.o          |
| o B * +         |
|. ..B =          |
|=.o+o. .         |
|EX.+oo  S        |
|*o+=+            |
|++=o..           |
|.+= +            |
|.+.+oo           |
+----[SHA256]-----+
Cloning into 'fonts'...
remote: Counting objects: 939, done.        
remote: Total 939 (delta 0), reused 0 (delta 0), pack-reused 939        
Receiving objects: 100% (939/939), 20.20 MiB | 1.93 MiB/s, done.
Resolving deltas: 100% (380/380), done.
Copying fonts...
Resetting font cache, this may take a moment...
Powerline fonts installed to /home/eleventh/.local/share/fonts
eleventh@ThinkPad:~$ " 0 1 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 1 69 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) face font-lock-string-face fontified t) 69 320 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 320 344 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 344 388 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) face font-lock-string-face fontified t) 388 389 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 389 461 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) face font-lock-string-face fontified t) 461 462 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 462 527 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 527 567 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 567 584 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 584 632 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 632 695 (inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 695 716 (font-lock-face (comint-highlight-prompt) inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t)) #("stow Xresources
" 0 15 (fontified t) 15 16 (fontified t)) #("stow vim
stow spacemacs
" 0 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 23 (fontified t) 23 24 (fontified t)) #("git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d

" 0 46 (fontified t) 46 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t))))
(setq search-ring '("x" "gnus" "white" "w" "wh" "color" "colo" "visual-line-mode" "skele"))
(setq regexp-search-ring 'nil)
