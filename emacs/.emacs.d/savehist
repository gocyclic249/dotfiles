;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(erc-nick-history-list erc-server-history-list file-name-history minibuffer-history helm-M-x-input-history))
(setq erc-nick-history-list '("eleventh"))
(setq erc-server-history-list '("irc.parahumans.net"))
(setq file-name-history '("~/.emacs.d/init.el" "~/Dropbox/Writing/IrishTaylor.org"))
(setq minibuffer-history '("Emacs" "6667" "erc-" "smart-tab" "tab" "auto"))
(setq helm-M-x-input-history '("cus" "eva" "erc" "package-in" "she" "eval-bu" "auto" "auto-c" "eval-buffer" "list-pa" "pac" "package" "package-install " "a" #("sentence" 0 3 (face font-lock-comment-face fontified t) 3 8 (face font-lock-comment-face fontified t))))
(setq kill-ring '(#("(setq erc-nickserv-passwords
      `((parahumans     ((\"eleventh\" . ,parahumans)))))

" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 28 (fontified t) 28 29 (fontified t) 29 55 (fontified t) 55 65 (face font-lock-string-face fontified t) 65 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t)) #("For help using this buffer, see Easy Customization in the Emacs manual.

                                          Search 

Operate on all settings in this buffer:
 Revert...   Apply   Apply and Save 


Parent groups: Emacs

Applications group: Applications written in Emacs.
       State : visible group members are all at standard values.
   
Subgroups:
Calc                    Advanced desk calculator and mathematical tool.
Calculator                    Simple Emacs calculator.
Calendar                    Calendar and time management support.
Doc View                    In-buffer viewer for PDF, PostScript, DVI, and DJVU files.
Erc                    Emacs Internet Relay Chat client.
Eshell                    Command shell implemented entirely in Emacs Lisp. More
Games                    Games, jokes and amusements.
Htmlfontify                    Convert buffers and files to HTML.
Ispell                    User variables for Emacs i" 202 203 (face (:underline t)) 291 340 (face custom-state) 345 356 (face custom-group-subtitle) 360 380 (display (space :align-to 20)) 438 458 (display (space :align-to 20)) 491 511 (display (space :align-to 20)) 557 577 (display (space :align-to 20)) 639 659 (display (space :align-to 20)) 699 719 (display (space :align-to 20)) 779 799 (display (space :align-to 20)) 839 859 (display (space :align-to 20)) 900 920 (display (space :align-to 20))) ";; Rename server buffers to reflect the current network name instead
;; of SERVER:PORT (e.g., \"freenode\" instead of \"irc.freenode.net:6667\").
;; This is useful when using a bouncer like ZNC where you have multiple
;; connections to the same server.
(setq erc-rename-buffers t)

;; Interpret mIRC-style color commands in IRC chats
(setq erc-interpret-mirc-color t)

;; The following are commented out by default, but users of other
;; non-Emacs IRC clients might find them useful.
;; Kill buffers for channels after /part
(setq erc-kill-buffer-on-part t)
;; Kill buffers for private queries after quitting the server
(setq erc-kill-queries-on-quit t)
;; Kill buffers for server messages after quitting the server
(setq erc-kill-server-buffer-on-quit t)

(load \"~/.ercpass\")
(require 'erc-services)
(erc-services-mode 1)

(setq erc-prompt-for-nickserv-password nil)

(setq erc-nickserv-passwords
      `((parahumans     ((\"eleventh\" . ,parahumans)))))

(setq erc-join-buffer 'bury)" ";;org
(global-set-key \"\\C-cl\" 'org-store-link)
(global-set-key \"\\C-ca\" 'org-agenda)
(global-set-key \"\\C-cc\" 'org-capture)
(global-set-key \"\\C-cb\" 'org-iswitchb)
" "" #("               (\"v\" \"Van\" entry (file+headline \"~/Dropbox/org/Todo.org\" \"Vans\")
                \"** Vans %^{Number} For: %^{Who} \\nDestination: %^{Destination} \\nTime Gone:%^{time}\")
               (\"d\" \"Duty\" entry (file+headline \"~/Dropbox/org/Duty.org\" \"Daily\")
                \"** %t\\n*** Altman :%^{Duty}:\\n*** Barham :%^{Duty}: \\n*** Contreras :%^{Duty}:\\n*** Colon :%^{Duty}:\\n*** Blaine :%^{Duty}:\\n*** Palmer :%^{Duty}:\\n*** Hunt :%^{Duty}:\\n*** Stover :%^{Duty}:\\n*** Lanier :%^{Duty}:\\n*** Escabedo :%^{Duty}:\\n*** Miller :%^{Duty}:\\n*** Nielsen :%^{Duty}:\\n*** Fornah :%^{Duty}:\\n***\" )
" 0 12 (fontified t) 12 16 (fontified t) 16 19 (fontified t face font-lock-string-face) 19 20 (fontified t) 20 25 (fontified t face font-lock-string-face) 25 47 (fontified t) 47 71 (fontified t face font-lock-string-face) 71 72 (fontified t) 72 78 (fontified t face font-lock-string-face) 78 79 (fontified t) 79 80 (fontified t) 80 96 (fontified t) 96 181 (face font-lock-string-face fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 199 (fontified t) 199 202 (face font-lock-string-face fontified t) 202 203 (fontified t) 203 209 (face font-lock-string-face fontified t) 209 231 (fontified t) 231 255 (face font-lock-string-face fontified t) 255 256 (fontified t) 256 261 (face font-lock-string-face fontified t) 261 263 (face font-lock-string-face fontified t) 263 264 (fontified t) 264 265 (fontified t) 265 281 (fontified t) 281 580 (face font-lock-string-face fontified t) 580 596 (face font-lock-string-face fontified t) 596 598 (fontified t) 598 599 (fontified t)) "(defun my-org-archive-done-tasks ()
  (interactive)
  (org-map-entries 'org-archive-subtree \"/DONE\" 'file))
(setq org-capture-templates
      (quote ((\"t\" \"Todo\" entry (file+headline \"~/Dropbox/org/Todo.org\" \"Todo\")
               \"** TODO %?\")
              (\"n\" \"Note\" entry (file \"~/Dropbox/org/notes.org\")
               \"** %? :NOTE:\\n%U\\n%a\\n\")
              (\"w\" \"Task\" entry (file+headline \"~/Dropbox/org/Todo.org\" \"Tasks\")
               \"* TODO %? \\nWho: %^{Who}\\nWhat: %^{What}\\nWhere: %^{Where}\\nWhy: %^{Why}\\nWhen:\\n\")
              (\"j\" \"Journal\" entry (file+datetree \"~/Dropbox/org/Diary.org\")
               \"** %?\\n%U\\n\")
              (\"a\" \"Appointment\" entry (file+headline \"~/Dropbox/org/Todo.org\" \"Meetings\")
               \"** Appointment: %? :APPOINTMENT:\")
              (\"m\" \"Meeting\" entry (file+headline \"~/Dropbox/org/Todo.org\" \"Meetings\")
               \"** Meeting: %? :MEETING:\")
              (\"e\" \"Event\" entry (file+headline \"~/Dropbox/org/Todo.org\" \"Events\")
               \"* %? %a\")
               (\"v\" \"Van\" entry (file+headline \"~/Dropbox/org/Todo.org\" \"Vans\")
                \"** Vans %^{Number} For: %^{Who} \\nDestination: %^{Destination} \\nTime Gone:%^{time}\")
               (\"d\" \"Duty\" entry (file+headline \"~/Dropbox/org/Duty.org\" \"Daily\")
                \"** %t\\n*** Altman :%^{Duty}:\\n*** Barham :%^{Duty}: \\n*** Contreras :%^{Duty}:\\n*** Colon :%^{Duty}:\\n*** Blaine :%^{Duty}:\\n*** Palmer :%^{Duty}:\\n*** Hunt :%^{Duty}:\\n*** Stover :%^{Duty}:\\n*** Lanier :%^{Duty}:\\n*** Escabedo :%^{Duty}:\\n*** Miller :%^{Duty}:\\n*** Nielsen :%^{Duty}:\\n*** Fornah :%^{Duty}:\\n***\" )
))))" "(require 'package)" #("(global-auto-complete-mode t)" 0 29 (fontified t)) #("
" 0 1 (fontified t)) #("(use-package smart-tab)(ac-co" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-constant-face) 22 23 (fontified t) 23 29 (fontified t)) #("nfig-default)

(global-auto-complete-mode t)(ac-config-default)" 0 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 44 (fontified t) 44 63 (fontified t)) #("
(use-package auto-complete)" 0 1 (fontified t) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 27 (face font-lock-constant-face fontified t) 27 28 (fontified t)) "(ac-config-default)

(global-auto-complete-mode t)" "(global-set-key (kbd \"<f7>\") 'org-mark-ring-push)
(global-set-key (kbd \"C-<f7>\") 'org-mark-ring-goto)" "(setq savehist-file \"~/.emacs.d/savehist\")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
"))
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
